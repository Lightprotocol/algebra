use ark_ff::{
    biginteger::BigInt,
    biginteger::BigInteger384 as BigInteger,
    fields::{Fp384, MontBackend},
};

pub struct FrConfig;
pub type Fr = Fp384<MontBackend<FrConfig, 6>>;

impl ark_ff::MontConfig<6> for FrConfig {
    /// MODULUS = 5945877603251831796258517492029536515488649313567122628445038208291596545947608789992834434053176523624102324539393
    const MODULUS: BigInteger = BigInt::<6>([
        17382266338285916161,
        13339389119208890949,
        9581378667081472421,
        15205557732015452966,
        15076886007691743306,
        2783667458303802095,
    ]);

    /// GENERATOR = 5
    #[rustfmt::skip]
    const GENERATOR: Fr = ark_ff::MontFp!(Fr, "5");

    /// TWO_ADIC_ROOT_OF_UNITY = GENERATOR ^ T =
    /// 1685271986666084262778868986067286870708440243287855288358961780551611799713704250599068248127477556627411635786779
    #[rustfmt::skip]
    const TWO_ADIC_ROOT_OF_UNITY: Fr = ark_ff::MontFp!(Fr, "1685271986666084262778868986067286870708440243287855288358961780551611799713704250599068248127477556627411635786779");

    const SMALL_SUBGROUP_BASE: Option<u32> = Some(3);
    const SMALL_SUBGROUP_BASE_ADICITY: Option<u32> = Some(2);

    // LARGE_SUBGROUP_ROOT_OF_UNITY = GENERATOR ^ (t * 3 ^ 2) =
    // 4782263695849493583247475447966822177504391850435302761245199662598017278280257369536403760936410198993405011225872
    const LARGE_SUBGROUP_ROOT_OF_UNITY: Option<Fr> = Some(ark_ff::MontFp!(Fr, "4782263695849493583247475447966822177504391850435302761245199662598017278280257369536403760936410198993405011225872"));
}

pub const FR_ONE: Fr = ark_ff::MontFp!(Fr, "1");
pub const FR_ZERO: Fr = ark_ff::MontFp!(Fr, "0");
